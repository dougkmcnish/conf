#+STARTUP: content
#+PROPERTY: header-args :tangle ~/.emacs.d/init.el

* Core configuration Opts
** Init Stuff

*** Warning

#+begin_src emacs-lisp
    ;; This config is managed by a literate config.org file. Changes made here will be overwritten.
#+end_src


*** UI

#+begin_src emacs-lisp
  (setq inhibit-startup-screen t)
  (scroll-bar-mode -1)        ; Disable visible scrollbar
  (tool-bar-mode -1)          ; Disable the toolbar
  (tooltip-mode -1)           ; Disable tooltips
  (set-fringe-mode 10)
  (menu-bar-mode -1)

  (set-frame-parameter (selected-frame) 'alpha '(98 . 80))
  (add-to-list 'default-frame-alist '(alpha . (98 . 80)))
#+end_src


*** straight.el

First things first, we configure =straight.el= to manage our packages. We select the =develop= branch
because that's where the magic happens.

We immediately load =org= and =use-package= so theyre available to the system ASAP.


#+BEGIN_SRC emacs-lisp
  (setq straight-repository-branch "develop")

  (defvar bootstrap-version)
  (let ((bootstrap-file
	 (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
	(bootstrap-version 6))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
	  (url-retrieve-synchronously
	   "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
	   'silent 'inhibit-cookies)
	(goto-char (point-max))
	(eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  (straight-use-package 'use-package)
  (straight-use-package 'org)
 #+END_SRC


 
*** Custom File

Set up our =customize= file and load it if it exists.


#+BEGIN_SRC emacs-lisp 
  (setq custom-file "~/.emacs.d/emacs-custom.el")
  (when (file-exists-p custom-file)
    (load-file custom-file))
#+END_SRC



*** Nuisances

We put a stop to a few minor annoyances. 
#+BEGIN_SRC emacs-lisp
  (setq native-comp-async-report-warnings-errors nil)
  (setq visible-bell t)
  (setq backup-directory-alist `(("." . "~/.emacs.d/saves/")))
  (when (eq system-type 'darwin)
    (setq mac-option-modifier 'meta))
#+END_SRC



*** Authinfo

Keeping authinfo in plain text is pretty dangerous. Let's go ahead and set up GPG and use it to encrypt authinfo transparently. 
#+BEGIN_SRC emacs-lisp
  ;; Transparent encryption
  (setenv "GPG_AGENT_INFO" nil)
  (setq epg-pinentry-mode 'loopback)

  (setq auth-sources
        '((:source "~/.authinfo.gpg")))
#+END_SRC



*** Convenience stuff

These items are here because I haven't figured out why I set them up in the first place. 
#+BEGIN_SRC emacs-lisp
  (defun my/org-time-stamp-now ()
    (interactive)
    (org-time-stamp '(16) t))

  (defun my/open-config ()
    (interactive)
    (find-file "~/.emacs-git.d/config.org"))
  
  (global-set-key (kbd "C-c o c") 'my/open-config)


  (add-to-list 'exec-path "~/.local/bin/")
#+END_SRC


*** Email

#+begin_src emacs-lisp :tangle ~/.gnus.el

  (setq gnus-select-method '(nnimap "imap.fastmail.com"))
  (setq mail-sources '((nnimap :server "imap.fastmail.com")))

  (setq message-send-mail-function 'smtpmail-send-it)

#+end_src
#+begin_src emacs-lisp
  
  (setq user-mail-address "doug@mcnishes.com"
        user-full-name    "Doug McNish")

  (setq send-mail-function 'smtpmail-send-it
      smtpmail-smtp-server "smtp.fastmail.com"
      smtpmail-smtp-service 587)

#+end_src


*** Eshell Aliases

#+begin_src emacs-lisp
  (defun eshell/edit (file)
         (find-file file))
  (defun eshell/view (file)	
         (find-file-read-only file))
#+end_src


** Snippets

#+begin_src emacs-lisp :tangle ~/.emacs.d/snippets/org-mode/elisp-src-no-tangle
# -*- mode: snippet -*-
# name: elisp-src-no-tangle
# key: <el
# --
,#+begin_src emacs-lisp 
$0
,#+end_src
#+end_src


* Packages


*** Doom Themes

#+begin_src emacs-lisp
	(use-package spacegray-theme :straight t)
	(use-package doom-themes
	  :straight t
	  :config
	  (load-theme 'doom-acario-dark t))

#+end_src



*** Clojure Mode

#+BEGIN_SRC emacs-lisp
  (use-package clojure-mode
    :straight t
    :mode (("\\.clj\\'" . clojure-mode)
           ("\\.edn\\'" . clojure-mode)))

  (use-package cider
    :straight t)

  (use-package paredit
    :straight t
    :hook (clojure-mode emacs-lisp-mode))
#+END_SRC


*** Haskell Mode
#+begin_src emacs-lisp
  (use-package haskell-mode
  :straight t)
#+end_src

*** Nix Mode

#+begin_src emacs-lisp
  (use-package nix-mode
    :straight t
    :mode "\\.nix\\'")
#+end_src


*** Pin Map version to built-in

#+begin_src emacs-lisp
  (use-package map
    :straight (:type built-in))
#+end_src



*** Deft
#+BEGIN_SRC emacs-lisp
  (use-package deft
    :straight t
    :bind ("<f8>" . deft)
    :commands (deft)
    :config (setq deft-directory "~/.deft"
                  deft-default-extension "md"
                  deft-extensions '("md" "org")))
#+END_SRC



*** Elfeed
#+BEGIN_SRC emacs-lisp
  (use-package elfeed
    :straight t)

  (use-package elfeed-protocol
    :straight t
    :after elfeed
    :bind (("C-c o e" . elfeed))
    :init
    (elfeed-protocol-enable)
    :config
    (setq elfeed-use-curl t)
    (setq elfeed-protocol-newsblur-maxpages 20)
    (setq elfeed-curl-extra-arguments '("--cookie-jar" "/tmp/newsblur-cookie"
                                        "--cookie" "/tmp/newsblur-cookie"))

    (setq elfeed-feeds '(("newsblur+https://dokemc@newsblur.com"
                         :use-authinfo t)))

    (setq shr-max-image-proportion 0.3))

  (use-package elfeed-autotag
    :after elfeed
    :straight t)

  ;; (use-package elfeed-org
  ;;   :straight t
  ;;   :after elfeed
  ;;   :init
  ;;   (elfeed-org)
  ;;   :config
  ;;   (setq rmh-elfeed-org-files (list "~/.emacs-git.d/elfeed.org")))
#+END_SRC



*** Counsel/Ivy
#+BEGIN_SRC emacs-lisp
  ;; (use-package counsel
  ;;   :straight t
  ;;   :bind (("M-x" . counsel-M-x)
  ;;          ("C-x C-f" . counsel-find-file)
  ;;          ))

  ;; (use-package ivy
  ;;   :diminish
  ;;   :init
  ;;   (setq ivy-use-virtual-buffers t)
  ;;   (setq ivy-count-format "(%d/%d) ")
  ;;   :bind (("C-s" . swiper))
  ;;   :config (ivy-mode 1))

  ;; (use-package swiper
  ;;   :straight t)

#+END_SRC


*** Helm


#+begin_src emacs-lisp
  (use-package helm
        :straight t
        :bind
        (("M-x" . helm-M-x)
         ("C-x C-f" . helm-find-files)
         ("C-x b" . helm-mini)
         ("M-y" . helm-show-kill-ring)
         ("C-x C-b" . helm-buffers-list)
         (:map helm-map
               ("<tab>" . helm-execute-persistent-action)
               ("C-i" . helm-execute-persistent-action)
               ("C-z" . helm-select-action))
         )
        :init

        (when (executable-find "curl")
          (setq helm-google-suggest-use-curl-p t))

        (setq helm-M-x-fuzzy-match t)

        (setq helm-split-window-in-side-p           t ; open helm buffer inside current window, not occupy whole other window
              helm-move-to-line-cycle-in-source     t ; move to end or beginning of source when reaching top or bottom of source.
              helm-ff-search-library-in-sexp        t ; search for library in `require' and `declare-function' sexp.
              helm-scroll-amount                    8 ; scroll 8 lines other window using M-<next>/M-<prior>
              helm-ff-file-name-history-use-recentf t
              helm-echo-input-in-header-line t)
        (setq helm-autoresize-max-height 0)
        (setq helm-autoresize-min-height 20)
        (setq helm-autoresize-mode 1)
        :config
        (helm-mode 1)
  )
#+end_src


*** Magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :straight t
    :bind (("C-c g" . magit-file-dispatch))
    :config
    (setq magit-define-global-key-bindings nil))
#+END_SRC



*** Mastodon
#+BEGIN_SRC emacs-lisp
  (use-package mastodon
    :straight (mastodon :host codeberg :branch "develop" :repo "martianh/mastodon.el")
    :init
    (setq mastodon-instance-url "https://infosec.exchange"
          mastodon-active-user "flagranterror")
    )
  
  (use-package emojify
    :straight t
    :init
    (add-hook 'after-init-hook #'global-emojify-mode))
#+END_SRC



*** Markdown Mode
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :straight t
    :mode ("README\\.md\\'" . gfm-mode)
    :init (setq markdown-command "multimarkdown"))
#+END_SRC


*** YAML Mode

#+begin_src emacs-lisp 
  (use-package yaml-mode
  :straight t
  :mode
  ("\\.yml\\'" . yaml-mode)
  ("\\.bu\\'" . yaml-mode))
#+end_src


*** CSV Mode

#+begin_src emacs-lisp 
  (use-package csv-mode
  :straight t)
#+end_src


*** pdf-tools

#+begin_src emacs-lisp
      (use-package pdf-tools
        :straight t
        :init
        (pdf-loader-install))
#+end_src


*** Notmuch Configuration
#+BEGIN_SRC emacs-lisp
  ;; (unless (eq system-type 'windows-nt)
  ;;   (setq sendmail-program "/opt/homebrew/bin/msmtp" ; fix this 
  ;;   q      message-sendmail-f-is-evil t
  ;;         message-sendmail-envelope-from 'header
  ;;         message-sendmail-extra-arguments '("--read-envelope-from")
  ;;         send-mail-function 'sendmail-send-it
  ;;         message-send-mail-function 'message-send-mail-with-sendmail)

  ;;   (use-package notmuch
  ;;     :straight t
  ;;     :bind (("C-c o m" . notmuch))
  ;;     :config
  ;;     (define-key notmuch-show-mode-map "d"
  ;;       (lambda ()
  ;;         "Mark Message as Trash"
  ;;         (interactive)
  ;;         (notmuch-show-tag (list "+deleted" "-inbox"))))
  ;;     )
  ;; )
    ;; (define-key notmuch-show-mode-map "D"
    ;;   (lambda ()
    ;;     "toggle deleted tag for message"
    ;;     (interactive)
    ;;     (if (member "deleted" (notmuch-show-get-tags))
    ;;         (notmuch-show-tag (list "-deleted"))
    ;;       (notmuch-show-tag (list "+deleted")))))
#+END_SRC



*** Org
**** org-mode
 
***** Basic org install 
#+begin_src emacs-lisp
    (use-package org
      :straight t
      :init
      (defun org-latex-format-headline-colored-keywords-function
          (todo todo-type priority text tags info)
        (concat
         (cond ((string= todo "TODO")(and todo (format "{\\color{red}\\bfseries\\sffamily %s} " todo)))
               ((string= todo "DONE")(and todo (format "{\\color{green}\\bfseries\\sffamily %s} " todo))))
         (and priority (format "\\framebox{\\#%c} " priority))
         text
         (and tags
              (format "\\hfill{}\\textsc{%s}"
                      (mapconcat (lambda (tag) (org-latex-plain-text tag info))
                                 tags ":")))))
#+end_src

***** Set up convenience functions

#+begin_src emacs-lisp 
      (setq org-latex-format-headline-function 'org-latex-format-headline-colored-keywords-function)

      (defun my/get-journal-file-today (&optional visit)
        "Capture to, or optionally visit, today's journal file."
        (interactive)
        (let* (
               (curr-date-stamp (format-time-string "%Y-%m.org"))
               (file-name (expand-file-name curr-date-stamp "~/Notes/journal/")))
          (if visit
              (find-file file-name)
              (set-buffer (org-capture-target-buffer file-name)))
          (goto-char (point-max))))

      (defun my/visit-journal-file-today ()
        "Visit daily journal file." 
        (interactive)
        (my/get-journal-file-today t))

      (defun my/visit-inbox ()
        (interactive)
        (find-file "~/Notes/inbox.org"))

      (defun my/visit-projects ()
        (interactive)
        (find-file "~/org/projects/index.org"))

#+end_src

***** UI and friends

#+begin_src emacs-lisp 
      (setq org-hide-leading-stars t) 
      (setq org-tag-alist '((:startgroup . nil)
                            ("@work" . ?w)("@home" . ?h)
                            (:endgroup . nil)
                            ("@note" . ?o)("@next" . ?n)("@urgent" . ?u)
                            ))
      (setq org-feed-alist
            '(("Krebs"
               "https://krebsonsecurity.com/feed/"
               "~/org/pages/feeds.org" "Krebs on Security")
              ("Bleeping Computer"
               "https://www.bleepingcomputer.com/feed/"
               "~/org/pages/feeds.org" "Bleeping Computer")))

#+end_src

***** Org capture templates

#+begin_src emacs-lisp 
  (setq org-capture-templates
        '(("t" "Inbox TODO"
           entry (file+headline "~/Notes/inbox.org" "Todo")
           "* TODO %?\n    SCHEDULED: %t\n %a"
           :empty-lines 1)
          ("b" "Book"
           entry (file "~/Notes/reading.org")
           "* %^{TITLE} %^{AUTHOR}p %^{PUBLISHED}p %^{PAGES|Unspec}p %^{RATING}p"
           :empty-lines 1)
          ("J" "Journal TODO"
           entry (function my/get-journal-file-today)
           "* TODO %?\n    SCHEDULED: %t\n  --Entered on %U\n  %i\n  %a"
           :empty-lines 1)
          ("j" "Daily Journal Entry"
           entry (function my/get-journal-file-today)
           "* %? \n  --Entered on %U\n %i\n  %a"
           :empty-lines 1)
          ))

      #+end_src

***** Export org files for Word users

#+begin_src emacs-lisp 
      (defun org-dtp-open (record-location)
        "Visit the dtp message with the given Message-ID."
        (shell-command (concat "open x-devonthink-item:" record-location)))
      (setq org-odt-preferred-output-format "docx")
#+end_src

***** Key bindings 

#+begin_src emacs-lisp 
      :bind (("C-c l" . org-store-link)
             ("C-c c" . org-capture)
             ("C-c a" . org-agenda)
             ("C-c o S" . org-save-all-org-buffers)
             ("C-c p j" . my/visit-journal-file-today)
             ("C-c p i" . my/visit-inbox)
             ("C-c p p" . my/visit-projects)
             ("C-c o p" . org-property-action))

#+end_src

***** Agenda and refile

#+begin_src emacs-lisp 
  :config
  (setq org-agenda-files (list
                          "~/org/pages/"
                          "~/org/beorg/"
                          "~/org/projects/"
                          ))
  (setq org-archive-location "~/org/archived.org::datetree/* Completed")
  (setq org-export-backends '(ascii html icalendar latex odt md))
  (setq org-refile-targets '((org-agenda-files :maxlevel . 2)))
  (setq org-startup-indented t)
  (setq org-log-done t)
  (setq org-skip-scheduled-if-done t)
  (setq org-agenda-skip-scheduled-if-deadline-is-shown t)
  (org-add-link-type "x-devonthink-item" 'org-dtp-open)
  )

#+end_src

**** Org Superstar

#+begin_src emacs-lisp 
  (use-package org-superstar
    :straight t
    :after org
    :hook (org-mode . org-superstar-mode))

#+end_src

**** OL Notmuch

#+begin_src emacs-lisp 
  ;; (unless (eq system-type 'windows-nt)
  ;;   (use-package ol-notmuch
  ;;     :straight t
  ;;     :after org))
#+end_src

**** org-roam
#+BEGIN_SRC emacs-lisp
  (when (eq system-type 'windows-nt)
    (use-package emacsql-sqlite3
      :straight t))

  (use-package org-roam
    :straight t
    :init
    (setq org-roam-directory (file-truename "~/org/org-roam"))  
    (setq org-roam-dailies-directory "daily/")
    (setq org-roam-dailies-capture-templates
          '(("d" "default" entry
             "* %?"
             :target (file+head "%<%Y_%m_%d>.org"
                                "#+title: %<%Y_%m_%d>\n"))))
    :bind (("C-c r f" . org-roam-node-find)
           ("C-c r r" . org-roam-node-random)
           ("C-c r i" . org-roam-node-insert)
           ("C-c o o" . org-id-get-create)
           ("C-c r a" . org-roam-alias-add)
           ("C-c r b" . org-roam-buffer-toggle)
           ("C-c r t" . org-roam-dailies-goto-today)
           ("C-c r c" . org-roam-dailies-capture-today)
           ("C-c r d" . org-roam-dailies-goto-date)
           )
    :config
    (when (eq system-type 'windows-nt)
        (setq org-roam-database-connector 'sqlite3))
    (org-roam-db-autosync-mode)
    )

#+END_SRC



*** Toolbox Tramp

On Fedora Silverblue and friends, we may need to use =Toolbox= to enter
a container from a =Flatpak= install. 
#+BEGIN_SRC emacs-lisp
  (when (file-exists-p "/usr/bin/toolbox")
    (use-package toolbox-tramp
      :straight (toolbox-tramp :type git
                               :host github
                               :repo "fejfighter/toolbox-tramp")
      :custom
      (toolbox-tramp-flatpak-wrap t))) ; Use `flatpak-spawn' when conecting
#+END_SRC



*** UI Tweaks
#+BEGIN_SRC emacs-lisp
  (use-package diminish
    :straight t)


  (global-set-key (kbd "C-c w w") 'window-swap-states)
#+END_SRC



*** Yasnippets
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :straight t
    :diminish
    :config
    (yas-global-mode 1))

  (use-package yasnippet-snippets
    :straight (yasnippet-snippets :type git
                                  :host github
                                  :repo "AndreaCrotti/yasnippet-snippets")
    :after yasnippet)
#+END_SRC



*** Matrix Client
#+begin_src emacs-lisp
  (use-package ement
  :straight (ement :type git
                   :host github
                   :repo "alphapapa/ement.el")
  :init
  (defun my/ement-connect ()
    (interactive)
    (ement-connect :uri-prefix "http://localhost:8009")))
#+end_src


* Local Variables
File will prompt to tangle and reload on every save.

;; Local Variables:
;; eval: (add-hook 'after-save-hook (lambda ()(if (y-or-n-p "Reload?")(load-file user-init-file))) nil t)
;; eval: (add-hook 'after-save-hook (lambda ()(if (y-or-n-p "Tangle?")(org-babel-tangle))) nil t)
;; End:

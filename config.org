#+PROPERTY: header-args :tangle ~/.emacs.d/init.el
* Core configuration Opts
** Init Stuff
*** Warning

*** straight.el
Configure =straight.el= to manage our packages. 
#+BEGIN_SRC emacs-lisp
  (setq straight-repository-branch "develop")

  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 6))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  (straight-use-package 'use-package)
 #+END_SRC

*** Custom File
First we set up our file for storing =customize= options and load it if it exists. 
#+BEGIN_SRC emacs-lisp 
  (setq custom-file "~/.emacs.d/emacs-custom.el")
  (when (file-exists-p custom-file)
    (load-file custom-file))
#+END_SRC

*** Nuisances
We put a stop to a few minor annoyances. 
#+BEGIN_SRC emacs-lisp 
  (setq inhibit-startup-screen t)
  (tool-bar-mode -1)
  (setq backup-directory-alist `(("." . "~/.emacs.d/saves/")))
  (when (eq system-type 'darwin)
        (setq mac-option-modifier 'meta))
#+END_SRC

*** Authinfo
Keeping authinfo in plain text is pretty dangerous. Let's go ahead and set up GPG and use it to encrypt authinfo transparently. 
#+BEGIN_SRC emacs-lisp
  ;; Transparent encryption
  (setenv "GPG_AGENT_INFO" nil)
  (setq epa-pinentry-mode 'loopback)

  (setq auth-sources
        '((:source "~/.authinfo.gpg")))
#+END_SRC

*** Stuff
These items are here because I haven't figured out why I set them up in the first place. 
#+BEGIN_SRC emacs-lisp
  (defun my/org-time-stamp-now ()
    (interactive)
    (org-time-stamp '(16) t))
  
  (add-to-list 'exec-path "~/.local/bin/")
#+END_SRC

* Packages
*** Clojure Mode
#+BEGIN_SRC emacs-lisp
  (use-package clojure-mode
    :straight t
    :mode (("\\.clj\\'" . clojure-mode)
           ("\\.edn\\'" . clojure-mode)))

  (use-package cider
    :straight t)

  (use-package paredit
    :straight t
    :hook (clojure-mode emacs-lisp-mode))
#+END_SRC
*** Pin Map version to built-in
#+begin_src emacs-lisp
  (use-package map
    :straight (:type built-in))
#+end_src
*** Deft
#+BEGIN_SRC emacs-lisp
  (use-package deft
    :straight t
    :bind ("<f8>" . deft)
    :commands (deft)
    :config (setq deft-directory "~/.deft"
                  deft-default-extension "md"
                  deft-extensions '("md" "org")))
#+END_SRC

*** Elfeed
#+BEGIN_SRC emacs-lisp
  (use-package elfeed
    :straight t)

  (use-package elfeed-protocol
    :straight t
    :after elfeed
    :bind (("C-c o e" . elfeed))
    :init
    (elfeed-protocol-enable)
    :config
    (setq elfeed-use-curl t)
    (setq elfeed-protocol-newsblur-maxpages 20)
    (setq elfeed-curl-extra-arguments '("--cookie-jar" "/tmp/newsblur-cookie"
                                        "--cookie" "/tmp/newsblur-cookie"))
    (setq shr-max-image-proportion 0.3))

  (use-package elfeed-autotag
    :after elfeed
    :straight t)

  (use-package elfeed-org
    :straight t
    :after elfeed
    :init
    (elfeed-org)
    :config
    (setq rmh-elfeed-org-files (list "~/.emacs-git.d/elfeed.org")))
#+END_SRC

*** Counsel/Ivy
#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :straight t
    :bind (("M-x" . counsel-M-x)
           ("C-x C-f" . counsel-find-file)
           ))

  (use-package ivy
    :diminish
    :init
    (setq ivy-use-virtual-buffers t)
    (setq ivy-count-format "(%d/%d) ")
    :bind (("C-s" . swiper))
    :config (ivy-mode 1))

  (use-package swiper
    :straight t)

#+END_SRC

*** Magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :straight t
    :bind (("C-c g" . magit-file-dispatch))
    :config
    (setq magit-define-global-key-bindings nil))
#+END_SRC

*** Mastodon
#+BEGIN_SRC emacs-lisp
  (use-package mastodon
    :straight (mastodon :host codeberg :repo "martianh/mastodon.el")
    :init
    (setq mastodon-instance-url "https://infosec.exchange"
          mastodon-active-user "flagranterror")
    )
  (use-package emojify
    :straight t)
#+END_SRC

*** Markdown Mode
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :straight t
    :mode ("README\\.md\\'" . gfm-mode)
    :init (setq markdown-command "multimarkdown"))
#+END_SRC

*** Notmuch Configuration
#+BEGIN_SRC emacs-lisp

  (setq sendmail-program "/opt/homebrew/bin/msmtp" ; fix this 
        message-sendmail-f-is-evil t
        message-sendmail-envelope-from 'header
        message-sendmail-extra-arguments '("--read-envelope-from")
        send-mail-function 'sendmail-send-it
        message-send-mail-function 'message-send-mail-with-sendmail)

  (use-package notmuch
    :straight t
    :bind (("C-c o m" . notmuch))
    :config
    (define-key notmuch-show-mode-map "d"
      (lambda ()
        "Mark Message as Trash"
        (interactive)
        (notmuch-show-tag (list "+deleted" "-inbox"))))
    )

  ;; (define-key notmuch-show-mode-map "D"
  ;;   (lambda ()
  ;;     "toggle deleted tag for message"
  ;;     (interactive)
  ;;     (if (member "deleted" (notmuch-show-get-tags))
  ;;         (notmuch-show-tag (list "-deleted"))
  ;;       (notmuch-show-tag (list "+deleted")))))
#+END_SRC

*** Org
**** org-mode
***** TODO Break this section down and clean it up. 
#+BEGIN_SRC emacs-lisp
  (use-package org
    :straight t
    :init
    (defun org-latex-format-headline-colored-keywords-function
        (todo todo-type priority text tags info)
      (concat
       (cond ((string= todo "TODO")(and todo (format "{\\color{red}\\bfseries\\sffamily %s} " todo)))
             ((string= todo "DONE")(and todo (format "{\\color{green}\\bfseries\\sffamily %s} " todo))))
       (and priority (format "\\framebox{\\#%c} " priority))
       text
       (and tags
            (format "\\hfill{}\\textsc{%s}"
                    (mapconcat (lambda (tag) (org-latex-plain-text tag info))
                               tags ":")))))

    (setq org-latex-format-headline-function 'org-latex-format-headline-colored-keywords-function)

    (defun my/get-journal-file-today (&optional visit)
      "Capture to, or optionally visit, today's journal file."
      (interactive)
      (let* (
             (curr-date-stamp (format-time-string "%Y-%m.org"))
             (file-name (expand-file-name curr-date-stamp "~/org/pages/")))
        (if visit
            (find-file file-name)
            (set-buffer (org-capture-target-buffer file-name)))
        (goto-char (point-max))))

    (defun my/visit-journal-file-today ()
      "Visit daily journal file." 
      (interactive)
      (my/get-journal-file-today t))

    (defun my/visit-inbox ()
      (interactive)
      (find-file "~/org/beorg/inbox.org"))

    (defun my/visit-projects ()
      (interactive)
      (find-file "~/org/projects/index.org"))

    (setq org-hide-leading-stars t) 
    (setq org-tag-alist '((:startgroup . nil)
                          ("@work" . ?w)("@home" . ?h)
                          (:endgroup . nil)
                          ("@note" . ?o)("@next" . ?n)("@urgent" . ?u)
                          ))
    (setq org-feed-alist
          '(("Krebs"
             "https://krebsonsecurity.com/feed/"
             "~/org/pages/feeds.org" "Krebs on Security")
            ("Bleeping Computer"
             "https://www.bleepingcomputer.com/feed/"
             "~/org/pages/feeds.org" "Bleeping Computer")))

    (setq org-capture-templates
          '(("t" "Inbox TODO"
             entry (file+headline "~/org/beorg/inbox.org" "Todo")
             "* TODO %?\n    SCHEDULED: %t\n %a"
             :empty-lines 1)
            ("b" "Book"
             entry (file "~/org/beorg/reading.org")
             "* %^{TITLE} %^{AUTHOR}p %^{PUBLISHED}p %^{PAGES|Unspec}p %^{RATING}p"
             :empty-lines 1)
            ("J" "Journal TODO"
             entry (function my/get-journal-file-today)
             "* TODO %?\n    SCHEDULED: %t\n  --Entered on %U\n  %i\n  %a"
             :empty-lines 1)
            ("j" "Daily Journal Entry"
             entry (function my/get-journal-file-today)
             "* %? \n  --Entered on %U\n %i\n  %a"
             :empty-lines 1)
            ))


    (defun org-dtp-open (record-location)
      "Visit the dtp message with the given Message-ID."
      (shell-command (concat "open x-devonthink-item:" record-location)))
    (setq org-odt-preferred-output-format "docx")

    :bind (("C-c l" . org-store-link)
           ("C-c c" . org-capture)
           ("C-c a" . org-agenda)
           ("C-c o S" . org-save-all-org-buffers)
           ("C-c p j" . my/visit-journal-file-today)
           ("C-c p i" . my/visit-inbox)
           ("C-c p p" . my/visit-projects)
           ("C-c o p" . org-property-action))
    :config
    (setq org-agenda-files (list
                            "~/org/pages/"
                            "~/org/beorg/"
                            "~/org/projects/"
                            ))
    (setq org-archive-location "~/org/archived.org::datetree/* Completed")
    (setq org-export-backends '(ascii html icalendar latex odt md))
    (setq org-refile-targets '((org-agenda-files :maxlevel . 2)))
    (setq org-startup-indented t)
    (setq org-log-done t)
    (setq org-skip-scheduled-if-done t)
    (setq org-agenda-skip-scheduled-if-deadline-is-shown t)
    (org-add-link-type "x-devonthink-item" 'org-dtp-open)
    )


  (use-package org-superstar
    :straight t
    :after org
    :hook (org-mode . org-superstar-mode))


  (use-package ol-notmuch
    :straight t
    :after org)
#+END_SRC

**** org-roam
#+BEGIN_SRC emacs-lisp
  (use-package org-roam
    :straight t
    :init
    (setq org-roam-directory (file-truename "~/org/org-roam"))  
    (setq org-roam-dailies-directory "daily/")
    (setq org-roam-dailies-capture-templates
          '(("d" "default" entry
             "* %?"
             :target (file+head "%<%Y_%m_%d>.org"
                                "#+title: %<%Y_%m_%d>\n"))))
    :bind (("C-c r f" . org-roam-node-find)
           ("C-c r r" . org-roam-node-random)
           ("C-c r i" . org-roam-node-insert)
           ("C-c o o" . org-id-get-create)
           ("C-c r a" . org-roam-alias-add)
           ("C-c r b" . org-roam-buffer-toggle)
           ("C-c r t" . org-roam-dailies-goto-today)
           ("C-c r c" . org-roam-dailies-capture-today)
           ("C-c r d" . org-roam-dailies-goto-date)
           )
    :config
    (org-roam-db-autosync-mode)
    )
#+END_SRC
*** Toolbox Tramp 
#+BEGIN_SRC emacs-lisp
  (when (file-exists-p "/usr/bin/toolbox")
    (use-package toolbox-tramp
      :straight (toolbox-tramp :type git
                               :host github
                               :repo "fejfighter/toolbox-tramp")
      :custom
      (toolbox-tramp-flatpak-wrap t))) ; Use `flatpak-spawn' when conecting
#+END_SRC

*** UI Tweaks
#+BEGIN_SRC emacs-lisp
  (use-package diminish
    :straight t)

  (use-package gruvbox-theme
    :straight t
    :config
    (load-theme 'gruvbox-dark-soft t))

  (global-set-key (kbd "C-c w w") 'window-swap-states)
#+END_SRC

*** Yasnippets
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :straight t
    :diminish
    :config
    (yas-global-mode 1))

  (use-package yasnippet-snippets
    :straight (yasnippet-snippets :type git
                                  :host github
                                  :repo "AndreaCrotti/yasnippet-snippets")
    :after yasnippet)
#+END_SRC

*** Element Client
#+begin_src emacs-lisp
  (use-package ement
  :straight (ement :type git
                   :host github
                   :repo "alphapapa/ement.el"))
#+end_src
